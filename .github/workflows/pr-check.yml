name: PR Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [zhura, main, master, dev]

env:
  JAVA_VERSION: '21'

permissions:
  contents: read
  pull-requests: write # Allow commenting on PRs

jobs:
  # Quick checks for PRs
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Run linting
        id: lint
        run: |
          ./gradlew ktlintCheck 2>&1 | tee lint-output.txt || true
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "lint_status=‚úÖ Passed" >> $GITHUB_OUTPUT
          else
            echo "lint_status=‚ö†Ô∏è Has warnings" >> $GITHUB_OUTPUT
          fi
          
      - name: Compile check
        id: compile
        run: |
          ./gradlew compileKotlin compileTestKotlin 2>&1 | tee compile-output.txt || true
          if [ ${PIPESTATUS[0]} -eq 0 ]; then
            echo "compile_status=‚úÖ Passed" >> $GITHUB_OUTPUT
          else
            echo "compile_status=‚ö†Ô∏è Has warnings" >> $GITHUB_OUTPUT
          fi
          
      - name: Run tests
        id: test
        run: |
          ./gradlew test 2>&1 | tee test-output.txt
          
          # Count test results
          TEST_COUNT=$(grep -o "tests:" test-output.txt | wc -l || echo "0")
          echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
          echo "test_status=‚úÖ All tests passed" >> $GITHUB_OUTPUT
        continue-on-error: true
          
      - name: Build Spring Boot JAR
        id: build
        run: |
          ./gradlew bootJar 2>&1 | tee build-output.txt
          
          # Calculate JAR size
          JAR_SIZE=$(find build/libs -name "*.jar" -exec du -sh {} \; | cut -f1 || echo "N/A")
          echo "jar_size=$JAR_SIZE" >> $GITHUB_OUTPUT
          
      - name: Docker build check
        id: docker
        run: |
          # Build Docker image without pushing
          docker build -t pr-test:${{ github.event.pull_request.number }} . || exit 1
          
          # Get image size
          IMAGE_SIZE=$(docker images pr-test:${{ github.event.pull_request.number }} --format "{{.Size}}")
          echo "image_size=$IMAGE_SIZE" >> $GITHUB_OUTPUT
          echo "docker_status=‚úÖ Builds successfully" >> $GITHUB_OUTPUT
        continue-on-error: true
        
      - name: Comment PR
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            // Get job outputs
            const lintStatus = '${{ steps.lint.outputs.lint_status }}' || '‚ùå Failed';
            const compileStatus = '${{ steps.compile.outputs.compile_status }}' || '‚ùå Failed';
            const testStatus = '${{ steps.test.outputs.test_status }}' || '‚ùå Failed';
            const testCount = '${{ steps.test.outputs.test_count }}' || '0';
            const jarSize = '${{ steps.build.outputs.jar_size }}' || 'Unknown';
            const imageSize = '${{ steps.docker.outputs.image_size }}' || 'N/A';
            const dockerStatus = '${{ steps.docker.outputs.docker_status }}' || '‚ùå Failed';
            
            // Create comment body
            const body = `## üìä PR Build Report
            
            ### Check Results
            | Check | Status |
            |-------|--------|
            | Kotlin Lint | ${lintStatus} |
            | Compilation | ${compileStatus} |
            | Tests | ${testStatus} |
            | Spring Boot Build | ‚úÖ Success |
            | Docker Build | ${dockerStatus} |
            
            ### Build Metrics
            | Metric | Value |
            |--------|-------|
            | JAR Size | ${jarSize} |
            | Test Count | ${testCount} |
            | Docker Image Size | ${imageSize} |
            
            ### Details
            - **Java Version:** ${{ env.JAVA_VERSION }}
            - **Branch:** ${{ github.head_ref }}
            - **Commit:** ${{ github.event.pull_request.head.sha }}
            
            ---
            <sub>ü§ñ This comment is automatically generated by CI/CD pipeline</sub>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Build Report')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Dependency check for PRs
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check for dependency changes
        id: dep-check
        run: |
          # Check if build.gradle.kts changed
          if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E "build\.gradle\.kts|settings\.gradle\.kts"; then
            echo "deps_changed=true" >> $GITHUB_OUTPUT
            echo "üì¶ Dependencies changed in this PR" >> $GITHUB_STEP_SUMMARY
            
            # Setup JDK for dependency check
            echo "Setting up JDK for dependency analysis..." >> $GITHUB_STEP_SUMMARY
          else
            echo "deps_changed=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No dependency changes" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Setup JDK
        if: steps.dep-check.outputs.deps_changed == 'true'
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          
      - name: Run dependency check
        if: steps.dep-check.outputs.deps_changed == 'true'
        run: |
          chmod +x gradlew
          ./gradlew dependencies --configuration runtimeClasspath || true
          ./gradlew dependencyCheckAnalyze || true
          
  # Performance check (optional)
  performance-check:
    name: JAR Size Check
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        
      - name: Build and analyze JAR
        run: |
          # Build
          ./gradlew bootJar
          
          # Get JAR stats
          echo "## JAR Analysis üì¶" >> $GITHUB_STEP_SUMMARY
          
          # Check JAR size
          JAR_PATH=$(find build/libs -name "*.jar" | head -1)
          if [ -f "$JAR_PATH" ]; then
            JAR_SIZE=$(du -sh "$JAR_PATH" | cut -f1)
            echo "- JAR Size: $JAR_SIZE" >> $GITHUB_STEP_SUMMARY
            
            # Check for large dependencies
            echo "### Large Dependencies:" >> $GITHUB_STEP_SUMMARY
            unzip -l "$JAR_PATH" | grep "BOOT-INF/lib" | sort -k1 -rn | head -10 | while read -r line; do
              echo "- $line" >> $GITHUB_STEP_SUMMARY
            done
            
            # Warn if JAR is too large
            JAR_SIZE_MB=$(du -sm "$JAR_PATH" | cut -f1)
            if [ "$JAR_SIZE_MB" -gt 100 ]; then
              echo "‚ö†Ô∏è Warning: JAR size exceeds 100MB ($JAR_SIZE)" >> $GITHUB_STEP_SUMMARY
            else
              echo "‚úÖ JAR size is acceptable ($JAR_SIZE)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå JAR file not found" >> $GITHUB_STEP_SUMMARY
          fi