name: CI/CD Pipeline

on:
  push:
    branches: [zhura, main, master, dev]
  pull_request:
    branches: [zhura, main, master, dev]
  workflow_dispatch: # Allow manual trigger

env:
  JAVA_VERSION: "21"
  GRADLE_VERSION: "8.5"

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Kotlin lint check
        run: ./gradlew ktlintCheck
        continue-on-error: true # Don't fail the build on lint errors

      - name: Compile Check
        run: ./gradlew compileKotlin compileTestKotlin
        continue-on-error: true # Compilation errors won't block

  # Job 2: Build and Test
  build:
    name: Build Spring Boot Application
    runs-on: ubuntu-latest
    needs: lint # Run after lint job

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run tests
        run: ./gradlew test

      - name: Build application
        run: ./gradlew bootJar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: |
            build/libs/*.jar
          retention-days: 7

      - name: Build summary
        run: |
          echo "## Build Summary 📊" >> $GITHUB_STEP_SUMMARY
          echo "- Java Version: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

          # Calculate JAR size
          if [ -f "build/libs/user-service-0.0.1-SNAPSHOT.jar" ]; then
            JAR_SIZE=$(du -sh build/libs/user-service-0.0.1-SNAPSHOT.jar | cut -f1)
            echo "- JAR Size: $JAR_SIZE" >> $GITHUB_STEP_SUMMARY
          fi

  # Job 3: Docker Build Validation
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: build # Run after successful build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false # Don't push to any registry
          load: true # Load the image into Docker daemon for testing
          tags: user-service:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Run the container briefly to ensure it starts
          docker run -d --name test-container -p 8081:8081 user-service:ci

          # Wait for container to be healthy (max 30 seconds)
          for i in {1..30}; do
            if docker ps | grep -q test-container; then
              echo "Container is running"
              break
            fi
            echo "Waiting for container to start... ($i/30)"
            sleep 1
          done

          # Check if container is still running
          if docker ps | grep -q test-container; then
            echo "✅ Docker container started successfully"
            docker logs test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container || true
            exit 1
          fi

          # Clean up
          docker stop test-container || true
          docker rm test-container || true

      - name: Docker build summary
        run: |
          echo "## Docker Build Summary 🐳" >> $GITHUB_STEP_SUMMARY
          echo "- Image Tag: user-service:ci" >> $GITHUB_STEP_SUMMARY
          echo "- Build Status: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- Container Test: ✅ Passed" >> $GITHUB_STEP_SUMMARY

          # Get image size
          IMAGE_SIZE=$(docker images user-service:ci --format "{{.Size}}")
          echo "- Image Size: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY

  # Job 4: Security Scan (Optional but recommended)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    continue-on-error: true # Don't fail the pipeline on security issues

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Run dependency check
        run: |
          chmod +x gradlew
          ./gradlew dependencyCheckAnalyze || true

      - name: Upload security results
        if: always()
        run: |
          echo "## Security Scan Results 🔒" >> $GITHUB_STEP_SUMMARY
          echo "Dependency check completed. Check logs for details." >> $GITHUB_STEP_SUMMARY

  # Final Job: Success Notification
  success:
    name: Pipeline Success
    runs-on: ubuntu-latest
    needs: [lint, build, docker-build]
    if: success()

    steps:
      - name: Success message
        run: |
          echo "## ✅ CI/CD Pipeline Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All checks passed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Quality Checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Spring Boot Build" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker Build Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for deployment!** 🚀" >> $GITHUB_STEP_SUMMARY
