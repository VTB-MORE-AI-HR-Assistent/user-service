name: CI/CD Pipeline

on:
  push:
    branches: [zhura, main, dev]
  pull_request:
    branches: [zhura, main, dev]
  workflow_dispatch: # Allow manual trigger

env:
  JAVA_VERSION: "21"

jobs:
  # Build
  build:
    name: Build Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build JAR (skip tests)
        run: ./gradlew bootJar -x test

      - name: Build Docker image
        run: |
          docker build -t user-service:latest .
          docker save user-service:latest | gzip > user-service.tar.gz

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: user-service.tar.gz
          retention-days: 1

  # Deploy to server
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    # Only deploy on push to zhura or main branches (not on PRs)
    if: success() && github.event_name == 'push' && (github.ref == 'refs/heads/zhura' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Setup SSH and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            # Create deployment directory
            mkdir -p ${{ secrets.SERVER_PATH }}
            cd ${{ secrets.SERVER_PATH }}
            
            # Stop existing container
            docker stop user-service 2>/dev/null || true
            docker rm user-service 2>/dev/null || true

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          source: "user-service.tar.gz"
          target: "${{ secrets.SERVER_PATH }}"

      - name: Deploy container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.SERVER_PATH }}
            
            # Load and run Docker image
            docker load < user-service.tar.gz
            
            # Debug: Show environment setup
            echo "Setting up environment variables..."
            echo "PG_URL is: ${{ secrets.PG_URL }}"
            
            # Run container with proper environment variables
            docker run -d \
              --name user-service \
              --restart unless-stopped \
              --network host \
              -e SPRING_PROFILES_ACTIVE=production \
              -e PG_USERNAME="${{ secrets.PG_USERNAME }}" \
              -e PG_PASSWORD="${{ secrets.PG_PASSWORD }}" \
              -e PG_URL="${{ secrets.PG_URL }}" \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              user-service:latest
            
            # Wait for container to start
            sleep 15
            
            # Check if running
            if docker ps | grep -q user-service; then
              echo "✅ Container is running!"
              echo "Checking application health..."
              
              # Try to access the application
              for i in {1..10}; do
                if curl -f http://localhost:8081/actuator/health 2>/dev/null; then
                  echo "✅ Application is healthy!"
                  break
                fi
                echo "Waiting for application to be ready... ($i/10)"
                sleep 3
              done
              
              # Show last logs
              echo "Application logs:"
              docker logs user-service --tail 30
            else
              echo "❌ Container failed to start!"
              echo "Container logs:"
              docker logs user-service
              exit 1
            fi
            
            # Cleanup
            rm -f user-service.tar.gz

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "- **Server**: ${{ secrets.SERVER_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Port**: 8081" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Access URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- API: http://${{ secrets.SERVER_HOST }}:8081" >> $GITHUB_STEP_SUMMARY
          echo "- Swagger: http://${{ secrets.SERVER_HOST }}:8081/swagger-ui.html" >> $GITHUB_STEP_SUMMARY