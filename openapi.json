{
  "openapi": "3.0.3",
  "info": {
    "title": "User Service API",
    "description": "User Service API for authentication and user management.\n\n## Features\n- JWT-based authentication\n- User registration and login\n- User profile management\n- Password change functionality\n- Token refresh mechanism\n\n## Authentication\nMost endpoints require JWT authentication. Use the `/api/v1/auth/login` endpoint to obtain a token.",
    "version": "1.0.0",
    "contact": {
      "name": "API Support",
      "email": "support@aihr.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8082",
      "description": "Local development server"
    },
    {
      "url": "https://api.aihr.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication and authorization endpoints (PUBLIC - no auth required)"
    },
    {
      "name": "User Management",
      "description": "User profile and management endpoints (PROTECTED - requires JWT)"
    }
  ],
  "paths": {
    "/api/v1/auth/login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "User login (PUBLIC)",
        "description": "Authenticate user with email and password to receive JWT tokens. This endpoint is PUBLIC and does not require authentication.",
        "operationId": "login",
        "security": [],
        "requestBody": {
          "description": "Login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/register": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Register new user (PUBLIC)",
        "description": "Create a new user account with the provided information. This endpoint is PUBLIC and does not require authentication.",
        "operationId": "register",
        "security": [],
        "requestBody": {
          "description": "Registration information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/refresh": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Refresh access token (PUBLIC)",
        "description": "Get a new access token using a valid refresh token. This endpoint is PUBLIC and does not require JWT authentication in the header.",
        "operationId": "refreshToken",
        "security": [],
        "requestBody": {
          "description": "Refresh token",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token successfully refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get all users (PROTECTED)",
        "description": "Retrieve a paginated list of all users. REQUIRES JWT authentication token in Authorization header.",
        "operationId": "getAllUsers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number (0-based)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 20
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort criteria (e.g., 'email,asc' or 'id,desc')",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved users list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageUserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get user by ID (PROTECTED)",
        "description": "Retrieve a specific user by their ID. REQUIRES JWT authentication token.",
        "operationId": "getUserById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["User Management"],
        "summary": "Update user (PROTECTED)",
        "description": "Update user information (first name, last name). REQUIRES JWT authentication token.",
        "operationId": "updateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "Update user request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["User Management"],
        "summary": "Delete user (PROTECTED)",
        "description": "Permanently delete a user account. REQUIRES JWT authentication token.",
        "operationId": "deleteUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User successfully deleted"
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - Insufficient permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me": {
      "get": {
        "tags": ["User Management"],
        "summary": "Get current user profile (PROTECTED)",
        "description": "Retrieve the profile of the currently authenticated user. REQUIRES JWT authentication token.",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/me/password": {
      "put": {
        "tags": ["User Management"],
        "summary": "Change current user's password (PROTECTED)",
        "description": "Change the password for the currently authenticated user. REQUIRES JWT authentication token.",
        "operationId": "changeMyPassword",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Password change request",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Password successfully changed"
          },
          "400": {
            "description": "Invalid current password or validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - JWT token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token for API authorization. Add it as: Bearer <your-jwt-token>"
      }
    },
    "schemas": {
      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "admin@hr.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "admin123"
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "required": ["email", "password", "firstName", "lastName"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "newuser@example.com"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "description": "User password (minimum 6 characters)",
            "example": "SecurePass123"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          }
        }
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token for API authentication",
            "example": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE2MTYzMjU0MjJ9.xRcD8ZlXvVQ"
          },
          "refreshToken": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens",
            "example": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE2MTY4NDM4MjJ9.yTdF9XmZ"
          },
          "tokenType": {
            "type": "string",
            "description": "Token type (always 'Bearer')",
            "example": "Bearer"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64",
            "description": "Access token expiration time in milliseconds",
            "example": 86400000
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        }
      },
      "RefreshTokenRequest": {
        "type": "object",
        "required": ["refreshToken"],
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Valid refresh token",
            "example": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE2MTY4NDM4MjJ9.yTdF9XmZ"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "New JWT access token",
            "example": "eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjE2MjM5MDIyLCJleHAiOjE2MTYzMjU0MjJ9.xRcD8ZlXvVQ"
          },
          "tokenType": {
            "type": "string",
            "description": "Token type (always 'Bearer')",
            "example": "Bearer"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64",
            "description": "Access token expiration time in milliseconds",
            "example": 86400000
          }
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "User ID",
            "example": 1
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "description": "New first name (optional)",
            "example": "Jane",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "New last name (optional)",
            "example": "Smith",
            "nullable": true
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "required": ["currentPassword", "newPassword"],
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password for verification",
            "example": "OldPassword123"
          },
          "newPassword": {
            "type": "string",
            "minLength": 6,
            "description": "New password (minimum 6 characters)",
            "example": "NewSecurePass456"
          }
        }
      },
      "PageUserDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "description": "List of users"
          },
          "pageable": {
            "$ref": "#/components/schemas/Pageable"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64",
            "description": "Total number of elements"
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages"
          },
          "last": {
            "type": "boolean",
            "description": "Is this the last page"
          },
          "first": {
            "type": "boolean",
            "description": "Is this the first page"
          },
          "numberOfElements": {
            "type": "integer",
            "description": "Number of elements in current page"
          },
          "size": {
            "type": "integer",
            "description": "Page size"
          },
          "number": {
            "type": "integer",
            "description": "Current page number"
          },
          "empty": {
            "type": "boolean",
            "description": "Is the page empty"
          }
        }
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "pageNumber": {
            "type": "integer"
          },
          "pageSize": {
            "type": "integer"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Error timestamp",
            "example": "2024-01-01T12:00:00Z"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 400
          },
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Email already exists"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "example": "/api/v1/auth/register"
          }
        }
      },
      "ValidationErrorResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "Error timestamp"
          },
          "status": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 422
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldError"
            },
            "description": "List of validation errors"
          }
        }
      },
      "FieldError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name",
            "example": "email"
          },
          "message": {
            "type": "string",
            "description": "Validation error message",
            "example": "Email должен быть валидным"
          }
        }
      }
    }
  }
}